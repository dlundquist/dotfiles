#!/usr/bin/python
#
# Copyright 2013 Dustin Lundquist <dustin@null-ptr.net>
#
# Generate a GraphViz file of the linkage dependencies between a collection of
# object files.
#
# Example:
#   ./configure
#   make
#   graph_linkages `find . -type f -name \*.o` > linkage_graph.dot
#   dot -Tpng linkage_graph.dot > linkage_graph.png
#

import os,sys,string,re

from subprocess import Popen,PIPE

modules = []
external_symbols = {}

for filename in sys.argv[1:]:
    nm_process = Popen(["/usr/bin/nm", filename], bufsize=4096, stdout=PIPE)

    module = {
        'filename': filename,
        'name': re.sub('-', '_', os.path.splitext(os.path.basename(filename))[0]),
        'provides': [],
        'requires': [],
        'dependencies': {}
    }
    modules.append(module)

    # nm output looks like this:
    #                 U stdout
    #                 U umask
    #000000000000031a t usage
    #0000000000000343 t write_pidfile
    #0000000000000008 C http_protocol
    #0000000000000000 D http_protocol
    for line in nm_process.stdout:
        address = line[0:16]
        linkage_type = line[17]
        linkage_symbol = re.sub('-', '_', line[19:-1])
        if linkage_type == 'T' or linkage_type == 'D':
            module['provides'].append(linkage_symbol)
            external_symbols[linkage_symbol] = module
        elif linkage_type == 'U' or linkage_type == 'C':
            module['requires'].append(linkage_symbol)


for module in modules:
    for symbol in module['requires']:
        if symbol in external_symbols:
            dependency = external_symbols[symbol]['name']
            if dependency in module['dependencies']:
                module['dependencies'][dependency].append(symbol)
            else:
                module['dependencies'][dependency] = [symbol]


print "digraph {"
for module in modules:
    for dependency in module['dependencies']:
        print "    %s -> %s [label=\"%s\"]" % (module['name'], dependency, string.join(module['dependencies'][dependency], "\\n"))

print "}"






